from app.validation import get_sections


class BriefOverviewService():
    def get_path_for_brief_link(self, brief, link, paths=None):
        path = '/buyers/frameworks/{}/requirements/{}/{}'.format(brief.framework.slug, brief.lot.slug, brief.id)
        work_order_id = brief.work_order.id if brief.work_order else None
        if paths:
            return paths[link].format(path=path, work_order_id=work_order_id)

        return link.format(path=path, work_order_id=work_order_id, brief_id=brief.id)

    def brief_contains_all_required_fields(self, brief, required_fields):
        for key in required_fields:
            if not brief.data.get(key):
                return False

        return True

    def brief_contains_any_optional_fields(self, brief, optional_fields):
        for key in optional_fields:
            if brief.data.get(key):
                return True

        return False

    def is_brief_section_complete(self, brief, section):
        from ...brief_utils import determine_required_fields
        if section['required']:
            required_fields = determine_required_fields(brief, section, enforce_required=False)
            return self.brief_contains_all_required_fields(brief, required_fields)
        else:
            return self.brief_contains_any_optional_fields(brief, section['optional'])

    def get_publish_links(self, brief):
        links = []
        draft_brief = brief.status == 'draft'
        brief_builder_paths = {
            'How long your brief will be open': '{path}/edit/how-long-your-brief-will-be-open/requirementsLength',
            'Description of work': '{path}/description-of-work',
            'Location': '{path}/edit/location/location',
            'Question and answer session details': '{path}/question-and-answer-session-details',
            'Role': '{path}/edit/role/title',
            'Shortlist and evaluation process': '{path}/shortlist-and-evaluation-process',
            'Title': '{path}/edit/title/title',
            'Who can respond': '{path}/edit/who-can-respond/specifySeller',
            'Description of training': '{path}/description-of-training',
            'Timeframes, location and budget': '{path}/timeframes,-location-and-budget',
            'Evaluate responses': '{path}/evaluate-responses',
            'Additional information': '{path}/additional-information',
            'Organisation': '{path}/edit/organisation/organisation',
            'Approach to market': '{path}/approach-to-market',
            'Summary': '{path}/edit/summary/summary'
        }
        # Get the sections key from the JSON schema generated by the frameworks repo
        schema_sections = get_sections('briefs-{}-{}'.format(brief.framework.slug, brief.lot.slug))
        for section in schema_sections:
            if section.get('editable', True):
                path = (self.get_path_for_brief_link(
                    brief, section['name'], brief_builder_paths) if draft_brief else None)

                links.append(
                    self.build_brief_link(
                        self.is_brief_section_complete(brief, section),
                        path,
                        section['name']))

        if brief.lot.slug == 'training':
            # Review and publish is complete if the buyer has completed all sections and published
            publish_completed = all([link['complete'] for link in links]) and not draft_brief
            publish_path = self.get_path_for_brief_link(brief, '{path}/publish') if draft_brief else None
            links.append(self.build_brief_link(publish_completed, publish_path, 'Review and publish your requirements'))

        return links

    def get_live_links(self, brief):
        links = []

        # Answer a question is complete if the brief is closed
        answer_question_path = (
            self.get_path_for_brief_link(
                brief,
                '{path}/supplier-questions/answer-question') if brief.status == 'live' else None)
        links.append(self.build_brief_link(brief.status == 'closed', answer_question_path, 'Answer a question'))
        return links

    def get_shortlist_links(self, brief):
        links = []

        view_responses_path = (self.get_path_for_brief_link(brief, '{path}/responses')
                               if brief.status == 'closed' else None)
        links.append(self.build_brief_link(False, view_responses_path, 'View responses'))
        return links

    def get_evaluation_links(self, brief):
        links = []

        # No green tick needed for evaluation template
        links.append(
            self.build_brief_link(
                False,
                self.get_path_for_brief_link(brief, '/static/media/documents/Scoring_Template.xlsx'),
                'Evaluation template (XLSX 13KB)'))

        return links

    def get_work_order_links(self, brief):
        links = []

        # No need for green ticks to indicate completion
        if brief.work_order:
            links.append(
                self.build_brief_link(
                    False,
                    self.get_path_for_brief_link(brief, '/work-orders/{work_order_id}'),
                    'Edit work order'))
        else:
            start_work_order_path = (self.get_path_for_brief_link(brief, '{path}/work-orders/create')
                                     if brief.status == 'closed' else None)
            links.append(self.build_brief_link(False, start_work_order_path, 'Start a work order'))

        return links

    def build_brief_link(self, complete, path, text):
        return {
            'complete': complete,
            'path': path,
            'text': text
        }

    def build_section(self, links, title):
        return {
            'links': links,
            'title': title
        }

    def get_sections(self, brief):
        sections = []

        sections.append(self.build_section(self.get_publish_links(brief), 'Publish your brief'))
        sections.append(self.build_section(self.get_live_links(brief), 'While the opportunity is live'))
        sections.append(self.build_section(self.get_shortlist_links(brief), 'Shortlist responses'))

        if brief.lot.slug == 'digital-professionals' or brief.lot.slug == 'training':
            sections.append(self.build_section(self.get_evaluation_links(brief), 'Evaluate specialists'))
            sections.append(self.build_section(self.get_work_order_links(brief), 'Work order'))

        return sections
